package dev.hive;

public class Maze {
    private final String maze = "1110111011111011111111101111101111111011111110100100010100010100000001"
            + "0101010000010101000101011011101111101110111110111010101111101010111010"
            + "1100010000000000010001000001010100000100010001011110111111111111101011"
            + "1111101011101011111011101101000000000000000100000000010001010000000100"
            + "0110101111101111111110111011101110101110111011101101010101010000000101"
            + "0100010001010101010100010110111010111011111010101111111010101011101111"
            + "1011000001000000010101010000000101010001000000000111101110101111101010"
            + "1110101110101110101110111111000100010101000001000101010001000101010101"
            + "0001101110111010111111111110111110101110111011101011010001010100000000"
            + "0001000001010100000000000101101011101011111011101110111010101011101111"
            + "1010110101000000000101010000010100010101010101010101101011111111101010"
            + "1111111010111010101010101110110100000101000101000000000101000101010101"
            + "0001011010111010111110101110111110101110101110101010100101010000000101"
            + "0101010001010100000001010101011110101111111010101010111010101011111010"
            + "1011101101010000000100010001000100010100010100010100011010101111111011"
            + "1011111011111011101011111010111100010100000001000101000000000101010000"
            + "0100010010111011101111101110101111111010101111101011101101000001010000"
            + "0001000100010100010100010001000111101110101111111011111110101111101110"
            + "1110111011000101010000000100000000010000000001000100010111111010111111"
            + "1011111011111011101110101110101111000000010000010000010100000101010101"
            + "0101010001101111101011111011111011101010101011101011111011010001010000"
            + "0001000001010101010100000100000001101011101011101110111110101010111011"
            + "1011111111110100010101010100000001010101000000010000000000101110111010"
            + "1110111110101011111111111110111111110001000101000000010100010000000000"
            + "0001010000011011101110111111111011101111101110111110111110110100000000"
            + "0000000000010100010100010000010000011010111110111011111110101110101110"
            + "1011111011111101010001010101010000010001010101010001000100011010111011"
            + "1011101110111010101010101110111010111001000100000000000101000101010001"
            + "0001000001000011111011101011101110111011101011111011111011111100000001"
            + "0101010101000100000101000000000101000111111111101010111010111011101011"
            + "1111101110101111000000000101000000010001010101000001010000010111111111"
            + "111011111111111110111011111011111111101";

    public final int width = 47;
    public final int height = 47;

    public final int startX = 22;
    public final int startY = 22;

    public final int endX = 0;
    public final int endY = 0;

    public boolean isWall(int x, int y) {
        if (x < 0) return true;
        if (x >= width) return true;
        if (y < 0) return true;
        if (y >= height) return true;

        char c = maze.charAt(width * y + x);
        return c == '0';
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();

        for (int n=0; n<maze.length(); ++n) {
            int x = n % width;
            int y = n / width;

            if (x == 0 && n != 0) sb.append('\n');

            if (x == startX && y == startY) sb.append("ST");
            else if (x == endX && y == endY) sb.append("EN");
            else if (isWall(x, y)) sb.append("##");
            else sb.append("  ");
        }

        return sb.toString();
    }
}
